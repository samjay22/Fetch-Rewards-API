// Code generated by MockGen. DO NOT EDIT.
// Source: ../Backend/Interfaces/QueueService.go

// Package Testing is a generated GoMock package.
package Testing

import (
	Interfaces "Fetch-Rewards-API/Backend/Interfaces"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// DispatchEvent mocks base method.
func (m *MockQueueService) DispatchEvent(eventType string, data interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchEvent", eventType, data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispatchEvent indicates an expected call of DispatchEvent.
func (mr *MockQueueServiceMockRecorder) DispatchEvent(eventType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchEvent", reflect.TypeOf((*MockQueueService)(nil).DispatchEvent), eventType, data)
}

// ProcessQueue mocks base method.
func (m *MockQueueService) ProcessQueue() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessQueue")
}

// ProcessQueue indicates an expected call of ProcessQueue.
func (mr *MockQueueServiceMockRecorder) ProcessQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessQueue", reflect.TypeOf((*MockQueueService)(nil).ProcessQueue))
}

// QueueEvent mocks base method.
func (m *MockQueueService) QueueEvent(eventType string, data interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueEvent", eventType, data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueEvent indicates an expected call of QueueEvent.
func (mr *MockQueueServiceMockRecorder) QueueEvent(eventType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueEvent", reflect.TypeOf((*MockQueueService)(nil).QueueEvent), eventType, data)
}

// RegisterEventHandler mocks base method.
func (m *MockQueueService) RegisterEventHandler(eventType string, handler Interfaces.EventDelegate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterEventHandler", eventType, handler)
}

// RegisterEventHandler indicates an expected call of RegisterEventHandler.
func (mr *MockQueueServiceMockRecorder) RegisterEventHandler(eventType, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEventHandler", reflect.TypeOf((*MockQueueService)(nil).RegisterEventHandler), eventType, handler)
}
