// Code generated by MockGen. DO NOT EDIT.
// Source: ../Backend/Interfaces/DatabaseService.go

// Package Testing is a generated GoMock package.
package Testing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseService is a mock of DatabaseService interface.
type MockDatabaseService struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseServiceMockRecorder
}

// MockDatabaseServiceMockRecorder is the mock recorder for MockDatabaseService.
type MockDatabaseServiceMockRecorder struct {
	mock *MockDatabaseService
}

// NewMockDatabaseService creates a new mock instance.
func NewMockDatabaseService(ctrl *gomock.Controller) *MockDatabaseService {
	mock := &MockDatabaseService{ctrl: ctrl}
	mock.recorder = &MockDatabaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseService) EXPECT() *MockDatabaseServiceMockRecorder {
	return m.recorder
}

// AddEntity mocks base method.
func (m *MockDatabaseService) AddEntity(ctx context.Context, delegate func(interface{}) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntity", ctx, delegate)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntity indicates an expected call of AddEntity.
func (mr *MockDatabaseServiceMockRecorder) AddEntity(ctx, delegate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntity", reflect.TypeOf((*MockDatabaseService)(nil).AddEntity), ctx, delegate)
}

// DeleteEntityByFilterRule mocks base method.
func (m *MockDatabaseService) DeleteEntityByFilterRule(ctx context.Context, filterRule func(interface{}) (bool, error)) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityByFilterRule", ctx, filterRule)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntityByFilterRule indicates an expected call of DeleteEntityByFilterRule.
func (mr *MockDatabaseServiceMockRecorder) DeleteEntityByFilterRule(ctx, filterRule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityByFilterRule", reflect.TypeOf((*MockDatabaseService)(nil).DeleteEntityByFilterRule), ctx, filterRule)
}

// GetEntityByFilterRule mocks base method.
func (m *MockDatabaseService) GetEntityByFilterRule(ctx context.Context, filterRule func(interface{}) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByFilterRule", ctx, filterRule)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByFilterRule indicates an expected call of GetEntityByFilterRule.
func (mr *MockDatabaseServiceMockRecorder) GetEntityByFilterRule(ctx, filterRule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByFilterRule", reflect.TypeOf((*MockDatabaseService)(nil).GetEntityByFilterRule), ctx, filterRule)
}

// UpdateEntityByFilterRule mocks base method.
func (m *MockDatabaseService) UpdateEntityByFilterRule(ctx context.Context, filterRule func(interface{}) (bool, error)) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityByFilterRule", ctx, filterRule)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityByFilterRule indicates an expected call of UpdateEntityByFilterRule.
func (mr *MockDatabaseServiceMockRecorder) UpdateEntityByFilterRule(ctx, filterRule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityByFilterRule", reflect.TypeOf((*MockDatabaseService)(nil).UpdateEntityByFilterRule), ctx, filterRule)
}
